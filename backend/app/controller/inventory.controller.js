const db = require("../config/db.config.js");
var { authJwt } = require("../middleware/authJwt.js");
const Inventory = db.Inventory;

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
exports.create = async (req, res) => {
  try {
    const inventoryData = {
      ...req.body,
      userId: req.userId, // –î–æ–±–∞–≤–ª—è–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞
    };
    const inventory = await Inventory.create(inventoryData);
    res.status(201).send(inventory);
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
exports.findAll = async (req, res) => {
  try {
    const inventories = await Inventory.findAll({
      where: { SaveId: req.params.saveId },
    });
    res.status(200).send(inventories);
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
exports.update = async (req, res) => {
  try {
    await Inventory.update(req.body, {
      where: { id: req.params.id },
    });
    res.status(200).send({ message: "–ó–∞–ø–∏—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" });
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
exports.delete = async (req, res) => {
  try {
    await Inventory.destroy({
      where: { id: req.params.id },
    });
    res.status(200).send({ message: "–ó–∞–ø–∏—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —É–¥–∞–ª–µ–Ω–∞!" });
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};
exports.useItem = async (req, res) => {
  try {
    const userId = req.userId;
    const { file } = req.body;

    console.log("‚ñ∂ useItem: userId =", userId, "| file =", file);

    const item = await Inventory.findOne({ where: { userId, file } });

    if (!item) {
      console.log("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return res.status(404).json({ message: "Item not found" });
    }

    if (item.quantity < 1) {
      console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–∞");
      return res.status(400).json({ message: "Item out of stock" });
    }

    item.quantity -= 1;
    await item.save();

    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω 1 –ø—Ä–µ–¥–º–µ—Ç:", file, "–æ—Å—Ç–∞–ª–æ—Å—å:", item.quantity);
    res.json({ message: "Item used" });
  } catch (err) {
    console.error("‚ùå FATAL ERROR in useItem:", err);
    res.status(500).json({ message: "Internal server error" });
  }
};
exports.addItemToInventory = async (req, res) => {
  try {
    console.log("üì• addItemToInventory:", { userId, file, saveId });
    const userId = req.userId; // üëà –ø–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const { file, itemId, quantity, metadata, saveId } = req.body;

    if (!file || !saveId) {
      return res.status(400).json({ message: "file –∏ saveId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
    let item = await Inventory.findOne({
      where: { file, SaveId: saveId, userId },
    });

    if (item) {
      item.quantity += quantity || 1;
      await item.save();
    } else {
      item = await Inventory.create({
        file: file,
        itemId: itemId || null,
        quantity: quantity || 1,
        metadata: metadata || {},
        SaveId: saveId,
        userId, // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º userId
      });
    }

    res.json(item);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ addItemToInventory:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
