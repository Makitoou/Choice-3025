const db = require("../config/db.config.js");
const Save = db.Save;
var { authJwt } = require("../middleware/authJwt.js");

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
exports.create = async (req, res) => {
  try {
    const save = await Save.create({
      ...req.body,
      UserId: req.user.id, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    });
    res.status(201).send(save);
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.findAll = async (req, res) => {
  try {
    const saves = await Save.findAll({
      where: { UserId: req.user.id },
      include: [
        { model: db.Inventory },
        { model: db.JournalEntry },
        { model: db.Note },
        { model: db.Location },
      ],
    });
    res.status(200).send(saves);
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
exports.delete = async (req, res) => {
  try {
    await Save.destroy({
      where: { id: req.params.id },
    });
    res.status(200).send({ message: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!" });
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};
exports.getLatest = async (req, res) => {
  try {
    const save = await db.Save.findOne({
      where: { UserId: req.user.id },
      order: [["timestamp", "DESC"]],
    });

    if (!save) {
      return res.status(404).json({ message: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (typeof save.gameState === "string") {
      save.gameState = JSON.parse(save.gameState);
    }

    res.json(save);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ getLatest:", error);
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è" });
  }
};
exports.initSave = async (req, res) => {
  try {
    const save = await Save.create({
      name: req.body.name || "–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
      UserId: req.user.id,
      timestamp: new Date(),
      resources: {},
      gameState: JSON.stringify({ phase: "intro" }),
      isAutosave: false,
    });

    res.status(201).send(save);
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};
exports.findOne = async (req, res) => {
  try {
    const save = await Save.findByPk(req.params.id);
    if (!save) {
      return res.status(404).send({ message: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    // üëá –¥–æ–±–∞–≤–∏–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É gameState
    if (typeof save.gameState === "string") {
      save.gameState = JSON.parse(save.gameState);
    }

    res.status(200).send(save);
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};
exports.update = async (req, res) => {
  try {
    const save = await Save.findByPk(req.params.id);
    if (!save) {
      return res.status(404).send({ message: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    const updatedFields = {
      timestamp: new Date(),
    };

    if (req.body.resources) {
      updatedFields.resources = req.body.resources;
    }

    if (req.body.gameState) {
      updatedFields.gameState = JSON.stringify(req.body.gameState); // üëà —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    }

    await save.update(updatedFields);

    res.status(200).send({ message: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", id: save.id });
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
};
