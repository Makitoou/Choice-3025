import axios from "https://cdn.jsdelivr.net/npm/axios/+esm";
axios.defaults.baseURL = "http://localhost:3000/api";

export function getAccessToken() {
  const user = JSON.parse(localStorage.getItem("user"));
  return user?.accessToken || null;
}

export async function ensureSaveExists() {
  const token = getAccessToken();
  if (!token) {
    console.warn("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    return null;
  }

  const currentSaveId = localStorage.getItem("currentSaveId");

  if (currentSaveId) {
    try {
      const check = await axios.get(`/save/${currentSaveId}`, {
        headers: { "x-access-token": token },
      });
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑ localStorage:", currentSaveId);
      return currentSaveId;
    } catch (err) {
      console.warn("‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑ localStorage –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ");
      localStorage.removeItem("currentSaveId"); // –æ—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ
    }
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ
  try {
    const latest = await axios.get("/save/latest", {
      headers: { "x-access-token": token },
    });
    localStorage.setItem("currentSaveId", latest.data.id);
    console.log("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", latest.data.id);
    return latest.data.id;
  } catch (err) {
    if (err.response?.status === 404) {
      const newSave = await axios.post(
        "/save/init",
        {},
        { headers: { "x-access-token": token } }
      );
      localStorage.setItem("currentSaveId", newSave.data.id);
      console.log("üì¶ –ù–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", newSave.data.id);
      return newSave.data.id;
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err);
      return null;
    }
  }
}
export async function savePhase(phase) {
  const saveId = localStorage.getItem("currentSaveId");
  const token = getAccessToken();
  if (!saveId || !token) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
    return;
  }

  try {
    await axios.put(
      `/save/${saveId}`,
      { gameState: { phase } },
      { headers: { "x-access-token": token } }
    );
    console.log(`‚úÖ –§–∞–∑–∞ "${phase}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
  } catch (err) {
    console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–∑—É "${phase}"`, err.message);
  }
}
